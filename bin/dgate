#!/usr/local/bin/node

var cluster = require('cluster')
  , dgate = require('../')

var cli = require('commander')
  .version(dgate.pkg.version)
  .description(dgate.pkg.description)
  .option('-p, --port <port>', 'port to listen on (default: 8080)', Number, 8080)
  .option('-w, --workers <num>', 'number of workers to fork (default: CPU count)', Number, require('os').cpus().length)
  .option('-h, --hostfile <path>', 'path to hosts file (default: /etc/hosts)', String, '/etc/hosts')
  .option('--sslCert <path>', 'path to an SSL certificate to use')
  .option('--sslKey <path>', 'path to an SSL private key to use')
  .option('--sslCiphers <ciphers>', 'list of OpenSSL ciphers to support', String, '')
  .option('-v, --verbose', 'verbose request logging')
  .option('--no-header', 'do not add X-Gate header')
  .option('--setuid <uid|username>', '(POSIX, requires root) run under this uid (or username)')
  .option('--setgid <gid|groupname>', '(POSIX, requires root) run under this gid (or groupname)')
  .option('--proxies <comma-separated-ips>', 'honor x-forwarded-for for known reverse-proxy server(s)')
  .parse(process.argv)

var options = {
  port: cli.port,
  workers: cli.workers,
  hostfile: cli.hostfile,
  sslCert: cli.sslCert,
  sslKey: cli.sslKey,
  sslCiphers: cli.sslCiphers,
  verbose: cli.verbose,
  header: cli.header,
  setuid: cli.setuid,
  setgid: cli.setgid,
  proxies: cli.proxies ? cli.proxies.split(',').filter((x) => { return !!x }) : null
};

if (cluster.isMaster) {
  dgate.master(options);
}
else {
  var server = dgate.worker(options);
  server.on('listening', function () {
    if (options.setgid) process.setgid(options.setgid);
    if (options.setuid) process.setuid(options.setuid);
  });
}
